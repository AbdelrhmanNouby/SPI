
SPI_TestApp_Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000038c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000400  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800060  00800060  00000400  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000400  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000430  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  0000046c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000efa  00000000  00000000  000005b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000090f  00000000  00000000  000014ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e67  00000000  00000000  00001dbd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000298  00000000  00000000  00002c24  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000574  00000000  00000000  00002ebc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e98  00000000  00000000  00003430  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  000042c8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <__vector_10>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a7 36       	cpi	r26, 0x67	; 103
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 c4 01 	jmp	0x388	; 0x388 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:
#include "../MCAL/TIMER0/TIMER0.h"
#include "../MCAL/DIO/DIO.h"
#include "../MCAL/UART/UART.h"

int main(void)
{
  7c:	cf 93       	push	r28
  7e:	df 93       	push	r29
  80:	1f 92       	push	r1
  82:	cd b7       	in	r28, 0x3d	; 61
  84:	de b7       	in	r29, 0x3e	; 62
	SPI_u8Init(SLAVE);
  86:	81 e0       	ldi	r24, 0x01	; 1
  88:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <SPI_u8Init>
	UART_u8Init();
  8c:	0e 94 9c 01 	call	0x338	; 0x338 <UART_u8Init>
	TIMER0_u8Init();
  90:	0e 94 30 01 	call	0x260	; 0x260 <TIMER0_u8Init>
	DIO_u8SetPortDirection(PORTD,OUTPUTPORT);
  94:	61 e0       	ldi	r22, 0x01	; 1
  96:	83 e0       	ldi	r24, 0x03	; 3
  98:	0e 94 59 00 	call	0xb2	; 0xb2 <DIO_u8SetPortDirection>
	uint8_t R_char  = 'A' ;		
  9c:	81 e4       	ldi	r24, 0x41	; 65
  9e:	89 83       	std	Y+1, r24	; 0x01
    while (1) 
    {	
		SPI_u8RecieveByte(&R_char);
  a0:	ce 01       	movw	r24, r28
  a2:	01 96       	adiw	r24, 0x01	; 1
  a4:	0e 94 25 01 	call	0x24a	; 0x24a <SPI_u8RecieveByte>
		DIO_u8SetPortData(PORTD,R_char);
  a8:	69 81       	ldd	r22, Y+1	; 0x01
  aa:	83 e0       	ldi	r24, 0x03	; 3
  ac:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_u8SetPortData>
  b0:	f7 cf       	rjmp	.-18     	; 0xa0 <main+0x24>

000000b2 <DIO_u8SetPortDirection>:
  }
  else
  	u8ErrorState = SetPinDirection_Error ;
 	
  return u8ErrorState;
}
  b2:	81 30       	cpi	r24, 0x01	; 1
  b4:	f9 f0       	breq	.+62     	; 0xf4 <DIO_u8SetPortDirection+0x42>
  b6:	30 f0       	brcs	.+12     	; 0xc4 <DIO_u8SetPortDirection+0x12>
  b8:	82 30       	cpi	r24, 0x02	; 2
  ba:	a1 f1       	breq	.+104    	; 0x124 <DIO_u8SetPortDirection+0x72>
  bc:	83 30       	cpi	r24, 0x03	; 3
  be:	09 f4       	brne	.+2      	; 0xc2 <DIO_u8SetPortDirection+0x10>
  c0:	49 c0       	rjmp	.+146    	; 0x154 <DIO_u8SetPortDirection+0xa2>
  c2:	60 c0       	rjmp	.+192    	; 0x184 <DIO_u8SetPortDirection+0xd2>
  c4:	61 30       	cpi	r22, 0x01	; 1
  c6:	91 f0       	breq	.+36     	; 0xec <DIO_u8SetPortDirection+0x3a>
  c8:	18 f0       	brcs	.+6      	; 0xd0 <DIO_u8SetPortDirection+0x1e>
  ca:	62 30       	cpi	r22, 0x02	; 2
  cc:	39 f0       	breq	.+14     	; 0xdc <DIO_u8SetPortDirection+0x2a>
  ce:	5c c0       	rjmp	.+184    	; 0x188 <DIO_u8SetPortDirection+0xd6>
  d0:	1a ba       	out	0x1a, r1	; 26
  d2:	80 b7       	in	r24, 0x30	; 48
  d4:	84 60       	ori	r24, 0x04	; 4
  d6:	80 bf       	out	0x30, r24	; 48
  d8:	80 e0       	ldi	r24, 0x00	; 0
  da:	08 95       	ret
  dc:	80 b7       	in	r24, 0x30	; 48
  de:	8b 7f       	andi	r24, 0xFB	; 251
  e0:	80 bf       	out	0x30, r24	; 48
  e2:	1a ba       	out	0x1a, r1	; 26
  e4:	8f ef       	ldi	r24, 0xFF	; 255
  e6:	8b bb       	out	0x1b, r24	; 27
  e8:	80 e0       	ldi	r24, 0x00	; 0
  ea:	08 95       	ret
  ec:	8f ef       	ldi	r24, 0xFF	; 255
  ee:	8a bb       	out	0x1a, r24	; 26
  f0:	80 e0       	ldi	r24, 0x00	; 0
  f2:	08 95       	ret
  f4:	61 30       	cpi	r22, 0x01	; 1
  f6:	91 f0       	breq	.+36     	; 0x11c <DIO_u8SetPortDirection+0x6a>
  f8:	18 f0       	brcs	.+6      	; 0x100 <DIO_u8SetPortDirection+0x4e>
  fa:	62 30       	cpi	r22, 0x02	; 2
  fc:	39 f0       	breq	.+14     	; 0x10c <DIO_u8SetPortDirection+0x5a>
  fe:	46 c0       	rjmp	.+140    	; 0x18c <DIO_u8SetPortDirection+0xda>
 100:	17 ba       	out	0x17, r1	; 23
 102:	80 b7       	in	r24, 0x30	; 48
 104:	84 60       	ori	r24, 0x04	; 4
 106:	80 bf       	out	0x30, r24	; 48
 108:	80 e0       	ldi	r24, 0x00	; 0
 10a:	08 95       	ret
 10c:	80 b7       	in	r24, 0x30	; 48
 10e:	8b 7f       	andi	r24, 0xFB	; 251
 110:	80 bf       	out	0x30, r24	; 48
 112:	17 ba       	out	0x17, r1	; 23
 114:	8f ef       	ldi	r24, 0xFF	; 255
 116:	88 bb       	out	0x18, r24	; 24
 118:	80 e0       	ldi	r24, 0x00	; 0
 11a:	08 95       	ret
 11c:	8f ef       	ldi	r24, 0xFF	; 255
 11e:	87 bb       	out	0x17, r24	; 23
 120:	80 e0       	ldi	r24, 0x00	; 0
 122:	08 95       	ret
 124:	61 30       	cpi	r22, 0x01	; 1
 126:	91 f0       	breq	.+36     	; 0x14c <DIO_u8SetPortDirection+0x9a>
 128:	18 f0       	brcs	.+6      	; 0x130 <DIO_u8SetPortDirection+0x7e>
 12a:	62 30       	cpi	r22, 0x02	; 2
 12c:	39 f0       	breq	.+14     	; 0x13c <DIO_u8SetPortDirection+0x8a>
 12e:	30 c0       	rjmp	.+96     	; 0x190 <DIO_u8SetPortDirection+0xde>
 130:	14 ba       	out	0x14, r1	; 20
 132:	80 b7       	in	r24, 0x30	; 48
 134:	84 60       	ori	r24, 0x04	; 4
 136:	80 bf       	out	0x30, r24	; 48
 138:	80 e0       	ldi	r24, 0x00	; 0
 13a:	08 95       	ret
 13c:	80 b7       	in	r24, 0x30	; 48
 13e:	8b 7f       	andi	r24, 0xFB	; 251
 140:	80 bf       	out	0x30, r24	; 48
 142:	14 ba       	out	0x14, r1	; 20
 144:	8f ef       	ldi	r24, 0xFF	; 255
 146:	85 bb       	out	0x15, r24	; 21
 148:	80 e0       	ldi	r24, 0x00	; 0
 14a:	08 95       	ret
 14c:	8f ef       	ldi	r24, 0xFF	; 255
 14e:	84 bb       	out	0x14, r24	; 20
 150:	80 e0       	ldi	r24, 0x00	; 0
 152:	08 95       	ret
 154:	61 30       	cpi	r22, 0x01	; 1
 156:	91 f0       	breq	.+36     	; 0x17c <DIO_u8SetPortDirection+0xca>
 158:	18 f0       	brcs	.+6      	; 0x160 <DIO_u8SetPortDirection+0xae>
 15a:	62 30       	cpi	r22, 0x02	; 2
 15c:	39 f0       	breq	.+14     	; 0x16c <DIO_u8SetPortDirection+0xba>
 15e:	1a c0       	rjmp	.+52     	; 0x194 <DIO_u8SetPortDirection+0xe2>
 160:	11 ba       	out	0x11, r1	; 17
 162:	80 b7       	in	r24, 0x30	; 48
 164:	84 60       	ori	r24, 0x04	; 4
 166:	80 bf       	out	0x30, r24	; 48
 168:	80 e0       	ldi	r24, 0x00	; 0
 16a:	08 95       	ret
 16c:	80 b7       	in	r24, 0x30	; 48
 16e:	8b 7f       	andi	r24, 0xFB	; 251
 170:	80 bf       	out	0x30, r24	; 48
 172:	11 ba       	out	0x11, r1	; 17
 174:	8f ef       	ldi	r24, 0xFF	; 255
 176:	82 bb       	out	0x12, r24	; 18
 178:	80 e0       	ldi	r24, 0x00	; 0
 17a:	08 95       	ret
 17c:	8f ef       	ldi	r24, 0xFF	; 255
 17e:	81 bb       	out	0x11, r24	; 17
 180:	80 e0       	ldi	r24, 0x00	; 0
 182:	08 95       	ret
 184:	81 e1       	ldi	r24, 0x11	; 17
 186:	08 95       	ret
 188:	81 e1       	ldi	r24, 0x11	; 17
 18a:	08 95       	ret
 18c:	81 e1       	ldi	r24, 0x11	; 17
 18e:	08 95       	ret
 190:	81 e1       	ldi	r24, 0x11	; 17
 192:	08 95       	ret
 194:	81 e1       	ldi	r24, 0x11	; 17
 196:	08 95       	ret

00000198 <DIO_u8SetPortData>:

// function to assign value to port
uint8_t DIO_u8SetPortData(uint8_t port, uint8_t data)
{ 
	uint8_t u8ErrorState = STD_TYPES_OK ;
	switch(port)
 198:	81 30       	cpi	r24, 0x01	; 1
 19a:	49 f0       	breq	.+18     	; 0x1ae <DIO_u8SetPortData+0x16>
 19c:	28 f0       	brcs	.+10     	; 0x1a8 <DIO_u8SetPortData+0x10>
 19e:	82 30       	cpi	r24, 0x02	; 2
 1a0:	49 f0       	breq	.+18     	; 0x1b4 <DIO_u8SetPortData+0x1c>
 1a2:	83 30       	cpi	r24, 0x03	; 3
 1a4:	51 f0       	breq	.+20     	; 0x1ba <DIO_u8SetPortData+0x22>
 1a6:	0c c0       	rjmp	.+24     	; 0x1c0 <DIO_u8SetPortData+0x28>
	{
		// check which port and assign value to this port 
		case PORTA:
			PORTA_REG = data;
 1a8:	6b bb       	out	0x1b, r22	; 27
}

// function to assign value to port
uint8_t DIO_u8SetPortData(uint8_t port, uint8_t data)
{ 
	uint8_t u8ErrorState = STD_TYPES_OK ;
 1aa:	80 e0       	ldi	r24, 0x00	; 0
	switch(port)
	{
		// check which port and assign value to this port 
		case PORTA:
			PORTA_REG = data;
			break;
 1ac:	08 95       	ret
			
		case PORTB:
			PORTB_REG = data;
 1ae:	68 bb       	out	0x18, r22	; 24
}

// function to assign value to port
uint8_t DIO_u8SetPortData(uint8_t port, uint8_t data)
{ 
	uint8_t u8ErrorState = STD_TYPES_OK ;
 1b0:	80 e0       	ldi	r24, 0x00	; 0
			PORTA_REG = data;
			break;
			
		case PORTB:
			PORTB_REG = data;
			break;
 1b2:	08 95       	ret
			
		case PORTC:
			PORTC_REG = data;
 1b4:	65 bb       	out	0x15, r22	; 21
}

// function to assign value to port
uint8_t DIO_u8SetPortData(uint8_t port, uint8_t data)
{ 
	uint8_t u8ErrorState = STD_TYPES_OK ;
 1b6:	80 e0       	ldi	r24, 0x00	; 0
			PORTB_REG = data;
			break;
			
		case PORTC:
			PORTC_REG = data;
			break;
 1b8:	08 95       	ret
		
		case PORTD:
			PORTD_REG = data;
 1ba:	62 bb       	out	0x12, r22	; 18
}

// function to assign value to port
uint8_t DIO_u8SetPortData(uint8_t port, uint8_t data)
{ 
	uint8_t u8ErrorState = STD_TYPES_OK ;
 1bc:	80 e0       	ldi	r24, 0x00	; 0
			PORTC_REG = data;
			break;
		
		case PORTD:
			PORTD_REG = data;
			break;
 1be:	08 95       	ret
	
		default:
		u8ErrorState = SetPortData_Error ;
 1c0:	83 e1       	ldi	r24, 0x13	; 19
	}
	return u8ErrorState ;
}
 1c2:	08 95       	ret

000001c4 <SPI_u8Init>:
	while ( GET_BIT(SPSR_REG,SPIF_BIT) == 0);				// stay to transfer be done 
	SET_BIT(PORTB_REG,SPI_SS_PIN);
}
void SPI_SetData(uint8_t data)
{
	SPDR_REG = data;
 1c4:	81 11       	cpse	r24, r1
 1c6:	20 c0       	rjmp	.+64     	; 0x208 <SPI_u8Init+0x44>
 1c8:	8d b1       	in	r24, 0x0d	; 13
 1ca:	82 60       	ori	r24, 0x02	; 2
 1cc:	8d b9       	out	0x0d, r24	; 13
 1ce:	8e b1       	in	r24, 0x0e	; 14
 1d0:	8e 7f       	andi	r24, 0xFE	; 254
 1d2:	8e b9       	out	0x0e, r24	; 14
 1d4:	8d b1       	in	r24, 0x0d	; 13
 1d6:	80 61       	ori	r24, 0x10	; 16
 1d8:	8d b9       	out	0x0d, r24	; 13
 1da:	8d b1       	in	r24, 0x0d	; 13
 1dc:	8f 7d       	andi	r24, 0xDF	; 223
 1de:	8d b9       	out	0x0d, r24	; 13
 1e0:	8d b1       	in	r24, 0x0d	; 13
 1e2:	80 64       	ori	r24, 0x40	; 64
 1e4:	8d b9       	out	0x0d, r24	; 13
 1e6:	87 b3       	in	r24, 0x17	; 23
 1e8:	80 68       	ori	r24, 0x80	; 128
 1ea:	87 bb       	out	0x17, r24	; 23
 1ec:	87 b3       	in	r24, 0x17	; 23
 1ee:	80 62       	ori	r24, 0x20	; 32
 1f0:	87 bb       	out	0x17, r24	; 23
 1f2:	87 b3       	in	r24, 0x17	; 23
 1f4:	80 61       	ori	r24, 0x10	; 16
 1f6:	87 bb       	out	0x17, r24	; 23
 1f8:	87 b3       	in	r24, 0x17	; 23
 1fa:	8f 7b       	andi	r24, 0xBF	; 191
 1fc:	87 bb       	out	0x17, r24	; 23
 1fe:	88 b3       	in	r24, 0x18	; 24
 200:	80 61       	ori	r24, 0x10	; 16
 202:	88 bb       	out	0x18, r24	; 24
 204:	80 e0       	ldi	r24, 0x00	; 0
 206:	08 95       	ret
 208:	81 30       	cpi	r24, 0x01	; 1
 20a:	e9 f4       	brne	.+58     	; 0x246 <SPI_u8Init+0x82>
 20c:	8d b1       	in	r24, 0x0d	; 13
 20e:	82 60       	ori	r24, 0x02	; 2
 210:	8d b9       	out	0x0d, r24	; 13
 212:	8e b1       	in	r24, 0x0e	; 14
 214:	8e 7f       	andi	r24, 0xFE	; 254
 216:	8e b9       	out	0x0e, r24	; 14
 218:	8d b1       	in	r24, 0x0d	; 13
 21a:	8f 7e       	andi	r24, 0xEF	; 239
 21c:	8d b9       	out	0x0d, r24	; 13
 21e:	8d b1       	in	r24, 0x0d	; 13
 220:	8f 7d       	andi	r24, 0xDF	; 223
 222:	8d b9       	out	0x0d, r24	; 13
 224:	8d b1       	in	r24, 0x0d	; 13
 226:	80 64       	ori	r24, 0x40	; 64
 228:	8d b9       	out	0x0d, r24	; 13
 22a:	87 b3       	in	r24, 0x17	; 23
 22c:	8f 77       	andi	r24, 0x7F	; 127
 22e:	87 bb       	out	0x17, r24	; 23
 230:	87 b3       	in	r24, 0x17	; 23
 232:	8f 7d       	andi	r24, 0xDF	; 223
 234:	87 bb       	out	0x17, r24	; 23
 236:	87 b3       	in	r24, 0x17	; 23
 238:	8f 7e       	andi	r24, 0xEF	; 239
 23a:	87 bb       	out	0x17, r24	; 23
 23c:	87 b3       	in	r24, 0x17	; 23
 23e:	80 64       	ori	r24, 0x40	; 64
 240:	87 bb       	out	0x17, r24	; 23
 242:	80 e0       	ldi	r24, 0x00	; 0
 244:	08 95       	ret
 246:	81 e9       	ldi	r24, 0x91	; 145
 248:	08 95       	ret

0000024a <SPI_u8RecieveByte>:
}
uint8_t SPI_u8RecieveByte(uint8_t * R_Byte)
{
		uint8_t u8ErrorState = STD_TYPES_OK ;
		if( R_Byte == NULL)
 24a:	00 97       	sbiw	r24, 0x00	; 0
 24c:	39 f0       	breq	.+14     	; 0x25c <SPI_u8RecieveByte+0x12>
		{
			u8ErrorState = SPI_RecieveByte_Error ;
		}
		else
		{
			while ( GET_BIT(SPSR_REG,SPIF_BIT) == 0);					// stay to transfer be done
 24e:	77 9b       	sbis	0x0e, 7	; 14
 250:	fe cf       	rjmp	.-4      	; 0x24e <SPI_u8RecieveByte+0x4>
			*R_Byte = SPDR_REG ;										// get data from SPDR REG
 252:	2f b1       	in	r18, 0x0f	; 15
 254:	fc 01       	movw	r30, r24
 256:	20 83       	st	Z, r18
{
	SPDR_REG = data;
}
uint8_t SPI_u8RecieveByte(uint8_t * R_Byte)
{
		uint8_t u8ErrorState = STD_TYPES_OK ;
 258:	80 e0       	ldi	r24, 0x00	; 0
 25a:	08 95       	ret
		if( R_Byte == NULL)
		{
			u8ErrorState = SPI_RecieveByte_Error ;
 25c:	83 e9       	ldi	r24, 0x93	; 147
		{
			while ( GET_BIT(SPSR_REG,SPIF_BIT) == 0);					// stay to transfer be done
			*R_Byte = SPDR_REG ;										// get data from SPDR REG
		}
		return u8ErrorState;
}
 25e:	08 95       	ret

00000260 <TIMER0_u8Init>:
		TIMER0_u8Stop();
		delay_state = DELAY_AVAILABLE;
		u8ErrorState = STD_TYPES_OK ;
	}
	return u8ErrorState ;
}
 260:	83 b7       	in	r24, 0x33	; 51
 262:	8f 7b       	andi	r24, 0xBF	; 191
 264:	83 bf       	out	0x33, r24	; 51
 266:	83 b7       	in	r24, 0x33	; 51
 268:	88 60       	ori	r24, 0x08	; 8
 26a:	83 bf       	out	0x33, r24	; 51
 26c:	8f b7       	in	r24, 0x3f	; 63
 26e:	80 68       	ori	r24, 0x80	; 128
 270:	8f bf       	out	0x3f, r24	; 63
 272:	89 b7       	in	r24, 0x39	; 57
 274:	82 60       	ori	r24, 0x02	; 2
 276:	89 bf       	out	0x39, r24	; 57
 278:	03 b6       	in	r0, 0x33	; 51
 27a:	06 fc       	sbrc	r0, 6
 27c:	0b c0       	rjmp	.+22     	; 0x294 <TIMER0_u8Init+0x34>
 27e:	03 b6       	in	r0, 0x33	; 51
 280:	03 fe       	sbrs	r0, 3
 282:	0a c0       	rjmp	.+20     	; 0x298 <TIMER0_u8Init+0x38>
 284:	0f b6       	in	r0, 0x3f	; 63
 286:	07 fe       	sbrs	r0, 7
 288:	09 c0       	rjmp	.+18     	; 0x29c <TIMER0_u8Init+0x3c>
 28a:	09 b6       	in	r0, 0x39	; 57
 28c:	01 fc       	sbrc	r0, 1
 28e:	08 c0       	rjmp	.+16     	; 0x2a0 <TIMER0_u8Init+0x40>
 290:	81 e4       	ldi	r24, 0x41	; 65
 292:	08 95       	ret
 294:	81 e4       	ldi	r24, 0x41	; 65
 296:	08 95       	ret
 298:	81 e4       	ldi	r24, 0x41	; 65
 29a:	08 95       	ret
 29c:	81 e4       	ldi	r24, 0x41	; 65
 29e:	08 95       	ret
 2a0:	80 e0       	ldi	r24, 0x00	; 0
 2a2:	08 95       	ret

000002a4 <__vector_10>:

// ISR 
void __vector_10(void)
{
 2a4:	1f 92       	push	r1
 2a6:	0f 92       	push	r0
 2a8:	0f b6       	in	r0, 0x3f	; 63
 2aa:	0f 92       	push	r0
 2ac:	11 24       	eor	r1, r1
 2ae:	2f 93       	push	r18
 2b0:	3f 93       	push	r19
 2b2:	4f 93       	push	r20
 2b4:	5f 93       	push	r21
 2b6:	6f 93       	push	r22
 2b8:	7f 93       	push	r23
 2ba:	8f 93       	push	r24
 2bc:	9f 93       	push	r25
 2be:	af 93       	push	r26
 2c0:	bf 93       	push	r27
 2c2:	ef 93       	push	r30
 2c4:	ff 93       	push	r31
	counter++;            // increment counter to compare with delay 
 2c6:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <counter>
 2ca:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <counter+0x1>
 2ce:	01 96       	adiw	r24, 0x01	; 1
 2d0:	90 93 64 00 	sts	0x0064, r25	; 0x800064 <counter+0x1>
 2d4:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <counter>
	if(counter == compare && delayCallBack != NULL)				// if delay finished and there function address to call  
 2d8:	20 91 63 00 	lds	r18, 0x0063	; 0x800063 <counter>
 2dc:	30 91 64 00 	lds	r19, 0x0064	; 0x800064 <counter+0x1>
 2e0:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <compare>
 2e4:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <compare+0x1>
 2e8:	28 17       	cp	r18, r24
 2ea:	39 07       	cpc	r19, r25
 2ec:	a1 f4       	brne	.+40     	; 0x316 <__vector_10+0x72>
 2ee:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 2f2:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 2f6:	89 2b       	or	r24, r25
 2f8:	71 f0       	breq	.+28     	; 0x316 <__vector_10+0x72>
	{
		counter = 0;
 2fa:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <counter+0x1>
 2fe:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <counter>
		CLR_BIT(TIMSK_REG, OCIE0);							// reset interrupt 
 302:	89 b7       	in	r24, 0x39	; 57
 304:	8d 7f       	andi	r24, 0xFD	; 253
 306:	89 bf       	out	0x39, r24	; 57
		delay_state = DELAY_AVAILABLE ;
 308:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <delay_state>
		delayCallBack();									// call the function 
 30c:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 310:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 314:	09 95       	icall
	}
 316:	ff 91       	pop	r31
 318:	ef 91       	pop	r30
 31a:	bf 91       	pop	r27
 31c:	af 91       	pop	r26
 31e:	9f 91       	pop	r25
 320:	8f 91       	pop	r24
 322:	7f 91       	pop	r23
 324:	6f 91       	pop	r22
 326:	5f 91       	pop	r21
 328:	4f 91       	pop	r20
 32a:	3f 91       	pop	r19
 32c:	2f 91       	pop	r18
 32e:	0f 90       	pop	r0
 330:	0f be       	out	0x3f, r0	; 63
 332:	0f 90       	pop	r0
 334:	1f 90       	pop	r1
 336:	18 95       	reti

00000338 <UART_u8Init>:
 */
uint8_t UART_u8Init()
{
	uint8_t u8ErrorState = STD_TYPES_OK ;
	/*Receive enable config*/
	SET_BIT(UCSRB_REG,RXEN_BIT);
 338:	8a b1       	in	r24, 0x0a	; 10
 33a:	80 61       	ori	r24, 0x10	; 16
 33c:	8a b9       	out	0x0a, r24	; 10
	if ( GET_BIT(UCSRB_REG,RXEN_BIT) == 0 )	
 33e:	54 9b       	sbis	0x0a, 4	; 10
 340:	02 c0       	rjmp	.+4      	; 0x346 <UART_u8Init+0xe>
 * Arguments   : void
 * return      : UART_Init_Error or STD_TYPES_OK in uint8_t    
 */
uint8_t UART_u8Init()
{
	uint8_t u8ErrorState = STD_TYPES_OK ;
 342:	80 e0       	ldi	r24, 0x00	; 0
 344:	01 c0       	rjmp	.+2      	; 0x348 <UART_u8Init+0x10>
	/*Receive enable config*/
	SET_BIT(UCSRB_REG,RXEN_BIT);
	if ( GET_BIT(UCSRB_REG,RXEN_BIT) == 0 )	
		 u8ErrorState = UART_Init_Error ;
 346:	81 e8       	ldi	r24, 0x81	; 129
		 
	/*Send enable config*/
	SET_BIT(UCSRB_REG,TXEN_BIT);
 348:	9a b1       	in	r25, 0x0a	; 10
 34a:	98 60       	ori	r25, 0x08	; 8
 34c:	9a b9       	out	0x0a, r25	; 10
	if ( GET_BIT(UCSRB_REG,TXEN_BIT) == 0 )
 34e:	53 9b       	sbis	0x0a, 3	; 10
		u8ErrorState = UART_Init_Error ;
 350:	81 e8       	ldi	r24, 0x81	; 129
		 
	/*Load configuration values in UCSrC Register*/
	/*Set URSEL to access UCSRC Reg*/
	SET_BIT(UCSRC_REG,URSEL_BIT);
 352:	90 b5       	in	r25, 0x20	; 32
 354:	90 68       	ori	r25, 0x80	; 128
 356:	90 bd       	out	0x20, r25	; 32
	if ( GET_BIT(UCSRB_REG,URSEL_BIT) == 0 )
 358:	57 9b       	sbis	0x0a, 7	; 10
		u8ErrorState = UART_Init_Error ;
 35a:	81 e8       	ldi	r24, 0x81	; 129
		
	/*ASynchronization mode*/				  
	CLR_BIT(UCSRC_REG,UMSEL_BIT);
 35c:	90 b5       	in	r25, 0x20	; 32
 35e:	9f 7b       	andi	r25, 0xBF	; 191
 360:	90 bd       	out	0x20, r25	; 32
	if ( GET_BIT(UCSRB_REG,UMSEL_BIT) != 0 )
 362:	56 99       	sbic	0x0a, 6	; 10
		u8ErrorState = UART_Init_Error ;
 364:	81 e8       	ldi	r24, 0x81	; 129
		
	/*Parity Mode config*/
	UCSRC_REG|=(UART_PARITY<<4);
 366:	90 b5       	in	r25, 0x20	; 32
 368:	90 bd       	out	0x20, r25	; 32
		 
	/*Stop Bits config*/
	ASSIGN_BIT(UCSRC_REG,USBS_BIT,UART_STOP_BIT_NO);
 36a:	90 b5       	in	r25, 0x20	; 32
 36c:	97 7f       	andi	r25, 0xF7	; 247
 36e:	90 bd       	out	0x20, r25	; 32
		 
	/*Character size config*/
	if (UART_SYMPOL_SIZE != UART_9_BITS)
	{
		 /*config char size(5,6,7,8)*/
		 UCSRC_REG |= (UART_SYMPOL_SIZE<<1);
 370:	90 b5       	in	r25, 0x20	; 32
 372:	96 60       	ori	r25, 0x06	; 6
 374:	90 bd       	out	0x20, r25	; 32
	}
	/*end of char size check*/
			 
	/*Baud Rate Value Config*/
	// URSEL BIT must be 0 to can write on UBRR Register
	CLR_BIT(UCSRC_REG,URSEL_BIT);
 376:	90 b5       	in	r25, 0x20	; 32
 378:	9f 77       	andi	r25, 0x7F	; 127
 37a:	90 bd       	out	0x20, r25	; 32
	if ( GET_BIT(UCSRB_REG,URSEL_BIT) != 0 )
 37c:	57 99       	sbic	0x0a, 7	; 10
		u8ErrorState = UART_Init_Error ;
 37e:	81 e8       	ldi	r24, 0x81	; 129
	// set the  baud rate 	
	UBRRH_REG = 0 ;
 380:	10 bc       	out	0x20, r1	; 32
	UBRRL_REG = UART_BAUDRATE;
 382:	93 e3       	ldi	r25, 0x33	; 51
 384:	99 b9       	out	0x09, r25	; 9
	
	return u8ErrorState ;
}
 386:	08 95       	ret

00000388 <_exit>:
 388:	f8 94       	cli

0000038a <__stop_program>:
 38a:	ff cf       	rjmp	.-2      	; 0x38a <__stop_program>
